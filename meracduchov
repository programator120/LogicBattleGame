<!DOCTYPE html>
<html lang="sk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Duchovný Detektor //--//</title>
    <style>
        :root {
            --primary: #2b0b3a;
            --secondary: #571b7e;
            --accent1: #9d4edd;
            --accent2: #4cc9f0;
            --text: #f5f5f5;
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--text);
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            padding: 20px 0;
            margin-bottom: 30px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            border: 1px solid var(--accent1);
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(90deg, var(--accent2), var(--accent1));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 0 15px rgba(76, 201, 240, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-bottom: 20px;
        }
        
        .theory-section {
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 1px solid rgba(157, 78, 221, 0.3);
        }
        
        .detector-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .controls {
            flex: 1;
            min-width: 300px;
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(76, 201, 240, 0.3);
        }
        
        .control-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            color: var(--accent2);
        }
        
        input[type="range"] {
            width: 100%;
            margin-bottom: 10px;
            -webkit-appearance: none;
            height: 10px;
            border-radius: 5px;
            background: linear-gradient(90deg, var(--accent1), var(--accent2));
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--text);
            cursor: pointer;
            box-shadow: 0 0 10px var(--accent1);
        }
        
        .value-display {
            font-size: 1.2rem;
            text-align: center;
            padding: 5px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 5px;
            margin-top: 5px;
        }
        
        .visualization {
            flex: 2;
            min-width: 300px;
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(157, 78, 221, 0.3);
            position: relative;
            overflow: hidden;
            min-height: 400px;
        }
        
        #spiritCanvas {
            width: 100%;
            height: 300px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .reading-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .reading {
            text-align: center;
            padding: 15px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.3);
            flex: 1;
            min-width: 120px;
        }
        
        .reading-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin: 10px 0;
            text-shadow: 0 0 10px var(--accent1);
        }
        
        .reading-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .equilibrium {
            background: linear-gradient(135deg, rgba(0, 200, 100, 0.2), rgba(0, 150, 80, 0.1));
            box-shadow: 0 0 15px rgba(0, 255, 150, 0.3);
        }
        
        .disturbance {
            background: linear-gradient(135deg, rgba(200, 50, 50, 0.2), rgba(150, 30, 30, 0.1));
            box-shadow: 0 0 15px rgba(255, 50, 50, 0.3);
        }
        
        .spirit-indicator {
            position: absolute;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: radial-gradient(circle, var(--accent2), var(--accent1));
            box-shadow: 0 0 20px var(--accent2);
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(1); opacity: 0.7; }
        }
        
        .log-container {
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 15px;
            margin-top: 30px;
            border: 1px solid rgba(157, 78, 221, 0.3);
            max-height: 200px;
            overflow-y: auto;
        }
        
        .log-entry {
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .detector-container {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Duchovný Detektor //--//</h1>
            <p class="subtitle">Meranie rovnováhy medzi fyzickým a duchovným svetom</p>
        </header>
        
        <div class="theory-section">
            <h2>Teória duchovnej detekcie</h2>
            <p>Podľa našej teórie existujú duchovné entity na pomedzí fyzického a duchovného sveta. Tieto entity narúšajú rovnováhu medzi realitami, čo je detegovateľné pomocou operátora //--//.</p>
            <p>Keď je hodnota A (hmota) a B (stín) v rovnováhe (A × B = 1), duchovná entita je v harmónii s okolím. Ak nie, vytvára sa interferenčný vzor, ktorý naznačuje prítomnosť entity.</p>
        </div>
        
        <div class="detector-container">
            <div class="controls">
                <h3>Ovládanie detektora</h3>
                
                <div class="control-group">
                    <label for="materialValue">Hodnota hmoty (A):</label>
                    <input type="range" id="materialValue" min="0.1" max="10" step="0.1" value="2">
                    <div class="value-display" id="materialValueDisplay">2.0</div>
                </div>
                
                <div class="control-group">
                    <label for="shadowValue">Hodnota stínu (B):</label>
                    <input type="range" id="shadowValue" min="0.1" max="10" step="0.1" value="0.5">
                    <div class="value-display" id="shadowValueDisplay">0.5</div>
                </div>
                
                <div class="control-group">
                    <label for="sensitivity">Citlivosť senzora:</label>
                    <input type="range" id="sensitivity" min="1" max="100" value="50">
                    <div class="value-display" id="sensitivityDisplay">50</div>
                </div>
                
                <button id="scanButton" style="width:100%; padding:15px; background:var(--accent1); color:white; border:none; border-radius:8px; cursor:pointer; font-size:1.1rem;">Spustiť skenovanie</button>
            </div>
            
            <div class="visualization">
                <h3>Vizualizácia duchovnej entity</h3>
                <canvas id="spiritCanvas"></canvas>
                
                <div class="reading-container">
                    <div class="reading" id="equilibriumReading">
                        <div class="reading-label">Rovnováha</div>
                        <div class="reading-value" id="equilibriumValue">1.0</div>
                        <div class="reading-label">A × B = 1</div>
                    </div>
                    
                    <div class="reading" id="disturbanceReading">
                        <div class="reading-label">Narúšanie</div>
                        <div class="reading-value" id="disturbanceValue">0.4</div>
                        <div class="reading-label">1/(A+B)</div>
                    </div>
                    
                    <div class="reading">
                        <div class="reading-label">Pravdepodobnosť entity</div>
                        <div class="reading-value" id="probabilityValue">25%</div>
                        <div class="reading-label">Úspešnosť detekcie</div>
                    </div>
                </div>
                
                <div id="spiritIndicator" class="spirit-indicator"></div>
            </div>
        </div>
        
        <div class="log-container">
            <h3>Záznam merania</h3>
            <div id="logEntries">
                <div class="log-entry">Systém pripravený na meranie. Nastavte hodnoty a spustite skenovanie.</div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const materialSlider = document.getElementById('materialValue');
            const shadowSlider = document.getElementById('shadowValue');
            const sensitivitySlider = document.getElementById('sensitivity');
            const materialDisplay = document.getElementById('materialValueDisplay');
            const shadowDisplay = document.getElementById('shadowValueDisplay');
            const sensitivityDisplay = document.getElementById('sensitivityDisplay');
            const equilibriumValue = document.getElementById('equilibriumValue');
            const disturbanceValue = document.getElementById('disturbanceValue');
            const probabilityValue = document.getElementById('probabilityValue');
            const equilibriumReading = document.getElementById('equilibriumReading');
            const disturbanceReading = document.getElementById('disturbanceReading');
            const scanButton = document.getElementById('scanButton');
            const logEntries = document.getElementById('logEntries');
            const spiritIndicator = document.getElementById('spiritIndicator');
            const canvas = document.getElementById('spiritCanvas');
            const ctx = canvas.getContext('2d');
            
            // Nastavenie veľkosti canvasu
            function resizeCanvas() {
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
            }
            
            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();
            
            // Aktualizácia zobrazovaných hodnôt
            materialSlider.addEventListener('input', function() {
                materialDisplay.textContent = this.value;
                updateReadings();
            });
            
            shadowSlider.addEventListener('input', function() {
                shadowDisplay.textContent = this.value;
                updateReadings();
            });
            
            sensitivitySlider.addEventListener('input', function() {
                sensitivityDisplay.textContent = this.value;
            });
            
            // Funkcia pre výpočet a zobrazenie hodnôt
            function updateReadings() {
                const A = parseFloat(materialSlider.value);
                const B = parseFloat(shadowSlider.value);
                
                // Výpočet rovnováhy
                const equilibrium = A * B;
                equilibriumValue.textContent = equilibrium.toFixed(2);
                
                // Výpočet narušenia
                const disturbance = 1 / (A + B);
                disturbanceValue.textContent = disturbance.toFixed(4);
                
                // Výpočet pravdepodobnosti entity
                const probability = Math.min(100, Math.abs(1 - equilibrium) * 100).toFixed(0);
                probabilityValue.textContent = probability + '%';
                
                // Vizualizácia stavu
                if (equilibrium === 1) {
                    equilibriumReading.classList.add('equilibrium');
                    disturbanceReading.classList.remove('disturbance');
                } else {
                    equilibriumReading.classList.remove('equilibrium');
                    disturbanceReading.classList.add('disturbance');
                }
                
                // Vizualizácia na canvase
                drawVisualization(A, B);
            }
            
            // Funkcia pre kreslenie vizualizácie
            function drawVisualization(A, B) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                const centerX = canvas.width / 2;
                const centerY = canvas.height / 2;
                const maxRadius = Math.min(centerX, centerY) - 20;
                
                // Vykreslenie interferenčných krúžkov
                const equilibrium = A * B;
                const disturbance = 1 / (A + B);
                
                // Počet krúžkov závisí od narušenia
                const rings = Math.max(3, Math.floor(10 * disturbance));
                
                for (let i = 0; i < rings; i++) {
                    const radius = (i / rings) * maxRadius;
                    const alpha = 0.7 - (i / rings) * 0.6;
                    
                    ctx.beginPath();
                    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
                    ctx.strokeStyle = `rgba(156, 78, 221, ${alpha})`;
                    ctx.lineWidth = 2;
                    ctx.stroke();
                }
                
                // Vykreslenie centrálneho bodu
                ctx.beginPath();
                ctx.arc(centerX, centerY, 10, 0, Math.PI * 2);
                ctx.fillStyle = equilibrium === 1 ? '#00ff88' : '#ff0055';
                ctx.fill();
                
                // Ak nie je rovnováha, vykreslíme "ducha"
                if (equilibrium !== 1) {
                    const spiritSize = Math.abs(1 - equilibrium) * 50 + 10;
                    const spiritX = centerX + (Math.random() * 40 - 20);
                    const spiritY = centerY + (Math.random() * 40 - 20);
                    
                    ctx.beginPath();
                    ctx.arc(spiritX, spiritY, spiritSize, 0, Math.PI * 2);
                    ctx.fillStyle = 'rgba(76, 201, 240, 0.3)';
                    ctx.fill();
                    
                    // Zobrazíme indikátor entity
                    const indicatorX = spiritX / canvas.width * 100;
                    const indicatorY = spiritY / canvas.height * 100;
                    spiritIndicator.style.left = `${indicatorX}%`;
                    spiritIndicator.style.top = `${indicatorY}%`;
                    spiritIndicator.style.opacity = '1';
                    
                    if (!spiritIndicator.classList.contains('pulse')) {
                        spiritIndicator.classList.add('pulse');
                    }
                } else {
                    spiritIndicator.style.opacity = '0';
                    spiritIndicator.classList.remove('pulse');
                }
            }
            
            // Funkcia pre skenovanie
            scanButton.addEventListener('click', function() {
                const A = parseFloat(materialSlider.value);
                const B = parseFloat(shadowSlider.value);
                const sensitivity = parseInt(sensitivitySlider.value);
                const equilibrium = A * B;
                
                // Simulácia náhodných faktorov
                const randomFactor = Math.random() * (100 - sensitivity) / 50;
                const detectionProbability = Math.min(100, Math.abs(1 - equilibrium) * 100 + randomFactor).toFixed(0);
                
                // Pridanie záznamu do logu
                const timestamp = new Date().toLocaleTimeString();
                let message;
                
                if (equilibrium === 1) {
                    message = `${timestamp}: Žiadna detekovateľná entita. Rovnováha je stabilná.`;
                } else {
                    message = `${timestamp}: Možná prítomnosť entity. Pravdepodobnosť: ${detectionProbability}%`;
                }
                
                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                logEntry.textContent = message;
                logEntries.prepend(logEntry);
                
                // Aktualizácia pravdepodobnosti
                probabilityValue.textContent = detectionProbability + '%';
                
                // Animácia skenovania
                scanButton.textContent = "Skenujem...";
                scanButton.disabled = true;
                
                setTimeout(function() {
                    scanButton.textContent = "Spustiť skenovanie";
                    scanButton.disabled = false;
                }, 2000);
            });
            
            // Inicializácia
            updateReadings();
            
            // Pravidelné mierne zmeny hodnôt pre realizmus
            setInterval(function() {
                // Mierne náhodné kolísanie hodnôt
                const currentA = parseFloat(materialSlider.value);
                const currentB = parseFloat(shadowSlider.value);
                
                const newA = Math.max(0.1, Math.min(10, currentA + (Math.random() * 0.4 - 0.2)));
                const newB = Math.max(0.1, Math.min(10, currentB + (Math.random() * 0.4 - 0.2)));
                
                materialSlider.value = newA;
                shadowSlider.value = newB;
                materialDisplay.textContent = newA.toFixed(1);
                shadowDisplay.textContent = newB.toFixed(1);
                
                updateReadings();
            }, 3000);
        });
    </script>
</body>
</html>
